// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: bulk.sql

package sqlc

import (
	"context"
)

const createBulk = `-- name: CreateBulk :one
INSERT INTO bulk (
    updated_at,
    download_uri,
    status
) VALUES (
    $1, $2, $3
) RETURNING id, updated_at, download_uri, created_at, status
`

type CreateBulkParams struct {
	UpdatedAt   string `json:"updatedAt"`
	DownloadUri string `json:"downloadUri"`
	Status      string `json:"status"`
}

func (q *Queries) CreateBulk(ctx context.Context, arg CreateBulkParams) (Bulk, error) {
	row := q.db.QueryRowContext(ctx, createBulk, arg.UpdatedAt, arg.DownloadUri, arg.Status)
	var i Bulk
	err := row.Scan(
		&i.ID,
		&i.UpdatedAt,
		&i.DownloadUri,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const getBulk = `-- name: GetBulk :one
SELECT id, updated_at, download_uri, created_at, status FROM bulk
WHERE updated_at = $1 LIMIT 1
`

func (q *Queries) GetBulk(ctx context.Context, updatedAt string) (Bulk, error) {
	row := q.db.QueryRowContext(ctx, getBulk, updatedAt)
	var i Bulk
	err := row.Scan(
		&i.ID,
		&i.UpdatedAt,
		&i.DownloadUri,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}

const updateBulk = `-- name: UpdateBulk :one
UPDATE bulk
SET status = $2
WHERE id = $1
RETURNING id, updated_at, download_uri, created_at, status
`

type UpdateBulkParams struct {
	ID     int32  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateBulk(ctx context.Context, arg UpdateBulkParams) (Bulk, error) {
	row := q.db.QueryRowContext(ctx, updateBulk, arg.ID, arg.Status)
	var i Bulk
	err := row.Scan(
		&i.ID,
		&i.UpdatedAt,
		&i.DownloadUri,
		&i.CreatedAt,
		&i.Status,
	)
	return i, err
}
